openapi: 3.1.0
info:
  title: Order System API
  description: API para gerenciamento de pedidos, produtos e clientes em uma lanchonete.
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  /api/cliente:
    post:
      summary: Cria um novo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cliente'
            example:
              cpf: "123.456.789-09"
              nomeCliente: "Cogumelo Silva"
              email: "Cogumelo.silva@example.com"
      responses:
        '201':
          description: Cliente criado com sucesso
        '500':
          description: Erro no servidor
    get:
      summary: Retorna todos os clientes
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cliente'
              example:
                - clienteId: "12345"
                  cpf: "123.456.789-09"
                  nomeCliente: "Cogumelo Silva"
                  email: "Cogumelo.silva@example.com"
                  registrado: true
                  dataRegistro: "2023-05-01T12:00:00Z"
        '404':
          description: Nenhum cliente encontrado

  /api/cliente/{clienteId}:
    get:
      summary: Retorna um cliente pelo ID
      parameters:
        - in: path
          name: clienteId
          schema:
            type: string
          required: true
          description: ID do cliente
      responses:
        '200':
          description: Cliente encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cliente'
              example:
                clienteId: "12345"
                cpf: "123.456.789-09"
                nomeCliente: "Cogumelo Silva"
                email: "Cogumelo.silva@example.com"
                registrado: true
                dataRegistro: "2023-05-01T12:00:00Z"
        '404':
          description: Cliente não encontrado
        '500':
          description: Erro no servidor

  /api/produto:
    get:
      summary: Retorna todos os produtos
      responses:
        '200':
          description: Lista de produtos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produto'
              example:
                - produtoId: "23456"
                  nomeProduto: "Hambúrguer"
                  descricaoProduto: "Hambúrguer de carne 200g"
                  precoProduto: 15.99
                  categoriaProduto: "Lanche"
        '404':
          description: Nenhum produto encontrado
    post:
      summary: Cria um novo produto ou vários produtos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Produto'
            example:
              - nomeProduto: "Hambúrguer"
                descricaoProduto: "Hambúrguer de carne 200g"
                precoProduto: 15.99
                categoriaProduto: "Lanche"
              - nomeProduto: "Refrigerante"
                descricaoProduto: "Refrigerante de cola 300ml"
                precoProduto: 6.99
                categoriaProduto: "Bebida"
              - nomeProduto: "Fritas"
                descricaoProduto: "Batata frita palito 300gr"
                precoProduto: 8.99
                categoriaProduto: "Acompanhamento"
              - nomeProduto: "Torta de maçã"
                descricaoProduto: "Fatia de torta de maçã 250gr"
                precoProduto: 9.99
                categoriaProduto: "Sobremesa"
      responses:
        '201':
          description: Produto(s) criado(s) com sucesso
        '400':
          description: Produtos não podem possuir o mesmo nome.
        '500':
          description: Erro no servidor

  /api/produto/{produtoId}:
    get:
      summary: Retorna um produto pelo ID
      parameters:
        - in: path
          name: produtoId
          schema:
            type: string
          required: true
          description: ID do produto
      responses:
        '200':
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
              example:
                produtoId: "23456"
                nomeProduto: "Hambúrguer"
                descricaoProduto: "Hambúrguer de carne 200g"
                precoProduto: 15.99
                categoriaProduto: "Lanche"
        '404':
          description: Produto não encontrado
        '500':
          description: Erro no servidor

    put:
      summary: Atualiza um produto pelo ID
      parameters:
        - in: path
          name: produtoId
          schema:
            type: string
          required: true
          description: ID do produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Produto'
            example:
              nomeProduto: "Batata Frita"
              descricaoProduto: "Porção de batata frita"
              precoProduto: 5.00
              categoriaProduto: "Acompanhamento"
      responses:
        '200':
          description: Produto atualizado com sucesso
        '404':
          description: Produto não encontrado
        '500':
          description: Erro no servidor

    delete:
      summary: Exclui um produto pelo ID
      parameters:
        - in: path
          name: produtoId
          schema:
            type: string
          required: true
          description: ID do produto
      responses:
        '200':
          description: Produto excluído com sucesso
        '404':
          description: Produto não encontrado
        '500':
          description: Erro no servidor

  /api/produto/categoria/{categoria}:
    get:
      summary: Retorna produtos por categoria
      parameters:
        - in: path
          name: categoria
          schema:
            type: string
          required: true
          description: Categoria do produto
      responses:
        '200':
          description: Lista de produtos por categoria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produto'
              example:
                - produtoId: "23456"
                  nomeProduto: "Hambúrguer"
                  descricaoProduto: "Hambúrguer de carne 200g"
                  precoProduto: 15.99
                  categoriaProduto: "Lanche"
                - produtoId: "23457"
                  nomeProduto: "Cheeseburger"
                  descricaoProduto: "Hambúrguer de carne 200g com queijo"
                  precoProduto: 17.99
                  categoriaProduto: "Lanche"
        '404':
          description: Nenhum produto encontrado na categoria especificada
        '500':
          description: Erro no servidor

  /api/pedido:
    get:
      summary: Retorna todos os pedidos
      responses:
        '200':
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'
              example:
                - pedidoId: "67890"
                  cliente: "12345"
                  produtos:
                    - produto: "23456"
                      quantidade: 2
                  total: 31.98
                  status: "Recebido"
                  datapedido: "2023-05-01T12:00:00Z"
                  statusPagamento: "Aprovado"
                  pagamentoId: "pagamento-123"
        '404':
          description: Nenhum pedido encontrado
    post:
      summary: Cria um novo pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pedido'
            example:
              cliente: "12345"
              produtos:
                - produto: "23456"
                  quantidade: 2
      responses:
        '201':
          description: Pedido criado com sucesso
        '500':
          description: Erro no servidor

  /api/pedido/{pedidoId}:
    get:
      summary: Retorna um pedido pelo ID
      parameters:
        - in: path
          name: pedidoId
          schema:
            type: string
          required: true
          description: ID do pedido
      responses:
        '200':
          description: Pedido encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
              example:
                pedidoId: "67890"
                cliente: "12345"
                produtos:
                  - produto: "23456"
                    quantidade: 2
                total: 31.98
                status: "Recebido"
                datapedido: "2023-05-01T12:00:00Z"
                statusPagamento: "Aprovado"
                pagamentoId: "pagamento-123"
        '404':
          description: Pedido não encontrado
        '500':
          description: Erro no servidor
    put:
      summary: Atualiza o status de um pedido pelo ID
      parameters:
        - in: path
          name: pedidoId
          schema:
            type: string
          required: true
          description: ID do pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                novoStatus:
                  type: string
            example:
              novoStatus: "Pronto"
      responses:
        '200':
          description: Pedido atualizado com sucesso
        '404':
          description: Pedido não encontrado
        '500':
          description: Erro no servidor
        
  /api/pedido/ativos:
    get:
      summary: Retorna pedidos filtrados excluindo os finalizados e ordenados por data e status
      responses:
        '200':
          description: Lista de pedidos filtrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'
              example:
                - pedidoId: "67890"
                  cliente: "12345"
                  produtos:
                    - produto: "23456"
                      quantidade: 2
                  total: 31.98
                  status: "Recebido"
                  datapedido: "2023-05-01T12:00:00Z"
                  statusPagamento: "Aprovado"
                  pagamentoId: "pagamento-123"
        '404':
          description: Nenhum pedido encontrado conforme os critérios

  /api/pagamento/{pedidoId}:
    post:
      summary: Cria um pagamento para um pedido especificado
      parameters:
        - in: path
          name: pedidoId
          schema:
            type: string
          required: true
          description: ID do pedido para o qual o pagamento será processado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cliente:
                  type: string
                  description: ID do cliente que está fazendo o pedido
                produtos:
                  type: array
                  items:
                    type: object
                    required:
                      - produto
                      - quantidade
                      - preco
                    properties:
                      produto:
                        type: string
                        description: ID do produto
                      quantidade:
                        type: integer
                        description: Quantidade do produto pedido
                      preco:
                        type: number
                        format: float
                        description: Preço unitário do produto
              required:
                - cliente
                - produtos
            example:
              cliente: "cliente123"
              produtos:
                - produto: "pedido123"
                  quantidade: "quantidade"
                  preco: "preço unitário"
      responses:
        '201':
          description: Pagamento processado e criado com sucesso
        '400':
          description: Informação inválida fornecida
        '404':
          description: Pedido não encontrado
        '500':
          description: Erro interno no servidor

  /api/webhook/pagseguro:
    post:
      summary: Recebe notificações do PagSeguro sobre o status do pagamento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  example: "transaction"
                data:
                  type: object
                  properties:
                    reference_id:
                      type: string
                    status:
                      type: string
              required:
                - event
                - data
            example:
              event: "transaction"
              data:
                reference_id: "67890"
                status: "PAID"
      responses:
        '200':
          description: Notificação recebida e processada
        '400':
          description: Dados inválidos fornecidos
        '500':
          description: Erro interno no servidor

components:
  schemas:
    Cliente:
      type: object
      properties:
        clienteId:
          type: string
        cpf:
          type: string
        nomeCliente:
          type: string
        email:
          type: string
        registrado:
          type: boolean
        dataRegistro:
          type: string
          format: date-time

    Pedido:
      type: object
      properties:
        pedidoId:
          type: string
        cliente:
          type: string
        produtos:
          type: array
          items:
            type: object
            properties:
              produto:
                type: string
              quantidade:
                type: number
        total:
          type: number
        status:
          type: string
        datapedido:
          type: string
          format: date-time
        statusPagamento:
          type: string
        pagamentoId:
          type: string

    Produto:
      type: object
      properties:
        produtoId:
          type: string
        nomeProduto:
          type: string
        descricaoProduto:
          type: string
        precoProduto:
          type: number
        categoriaProduto:
          type: string

    Pagamento:
      type: object
      properties:
        pedidoId:
          type: string
        metodoPagamento:
          type: string
        valor:
          type: number